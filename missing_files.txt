## .gitignore
```
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# PWA files
/public/sw.js
/public/workbox-*.js
/public/worker-*.js
/public/sw.js.map
/public/workbox-*.js.map
/public/worker-*.js.map
```

## .eslintrc.json
```json
{
  "extends": "next/core-web-vitals"
}
```

## postcss.config.js
```javascript
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
```

## tsconfig.json
```json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```

## README.md
```markdown
# Time Tracker PWA

A simple, reliable, and mobile-first time tracking application built with Next.js, TypeScript, and Tailwind CSS.

## Features

- ‚è±Ô∏è **Instant Start/Stop** - Zero friction time tracking
- üì± **Mobile-First PWA** - Installable app with offline support
- üè† **Local-First** - All data stored locally in IndexedDB
- üïí **AM/PM Native** - User-friendly time display
- üìä **Daily Summaries** - Track work, breaks, and productivity
- ‚ú® **Smooth Animations** - Delightful micro-interactions
- üéØ **Quick Actions** - Fast logging for breaks, lunch, tech issues

## Tech Stack

- **Framework**: Next.js 14 with TypeScript
- **Styling**: Tailwind CSS
- **Animations**: Framer Motion
- **Storage**: IndexedDB via IDB
- **PWA**: next-pwa
- **Time Handling**: date-fns with timezone support

## Getting Started

1. **Install dependencies:**
   ```bash
   npm install
   ```

2. **Run development server:**
   ```bash
   npm run dev
   ```

3. **Open [http://localhost:3000](http://localhost:3000)** in your browser

## Build for Production

```bash
npm run build
npm start
```

## PWA Installation

The app can be installed on mobile devices and desktop browsers for a native app experience.

## Data Storage

All data is stored locally in your browser's IndexedDB. Your time tracking data never leaves your device unless you explicitly export it.

## Features Roadmap

- [x] Basic time tracking
- [x] Daily summaries  
- [x] Timeline view
- [x] PWA support
- [ ] History & Reports
- [ ] Export/Import data
- [ ] Idle detection
- [ ] Tags & Projects
- [ ] Backup & Sync

## License

MIT License - feel free to use for personal or commercial projects.
```

## src/pages/history.tsx
```typescript
import Head from 'next/head';
import { useState, useEffect } from 'react';
import { Session, SessionService } from '@/lib/idb';
import { Calendar, ChevronLeft, ChevronRight } from 'lucide-react';
import { format, subDays, addDays, startOfDay, endOfDay } from 'date-fns';
import { zonedTimeToUtc } from 'date-fns-tz';
import Timeline from '@/components/Timeline';
import TodaySummary from '@/components/TodaySummary';

export default function HistoryPage() {
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [sessions, setSessions] = useState<Session[]>([]);
  const [loading, setLoading] = useState(true);

  const loadSessionsForDate = async (date: Date) => {
    setLoading(true);
    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    
    const startLocal = startOfDay(date);
    const endLocal = endOfDay(date);
    
    const startUtc = zonedTimeToUtc(startLocal, timeZone).toISOString();
    const endUtc = zonedTimeToUtc(endLocal, timeZone).toISOString();
    
    const daySessions = await SessionService.getByDateRange(startUtc, endUtc);
    setSessions(daySessions.sort((a, b) => 
      new Date(a.start_ts).getTime() - new Date(b.start_ts).getTime()
    ));
    setLoading(false);
  };

  useEffect(() => {
    loadSessionsForDate(selectedDate);
  }, [selectedDate]);

  const navigateDate = (direction: 'prev' | 'next') => {
    const newDate = direction === 'prev' 
      ? subDays(selectedDate, 1)
      : addDays(selectedDate, 1);
    setSelectedDate(newDate);
  };

  const isToday = format(selectedDate, 'yyyy-MM-dd') === format(new Date(), 'yyyy-MM-dd');

  return (
    <>
      <Head>
        <title>History - Time Tracker</title>
      </Head>

      <div className="space-y-6">
        {/* Date Navigation */}
        <div className="bg-white rounded-lg shadow-sm p-4">
          <div className="flex items-center justify-between">
            <button
              onClick={() => navigateDate('prev')}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <ChevronLeft size={20} />
            </button>
            
            <div className="flex items-center gap-2">
              <Calendar size={20} className="text-gray-600" />
              <h1 className="text-lg font-semibold">
                {isToday ? 'Today' : format(selectedDate, 'MMM d, yyyy')}
              </h1>
            </div>
            
            <button
              onClick={() => navigateDate('next')}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              disabled={isToday}
            >
              <ChevronRight size={20} className={isToday ? 'text-gray-300' : ''} />
            </button>
          </div>
        </div>

        {loading ? (
          <div className="flex items-center justify-center py-12">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500"></div>
          </div>
        ) : (
          <>
            <TodaySummary sessions={sessions} runningDuration={0} />
            <Timeline
              sessions={sessions}
              onUpdateSession={() => {}}
              onDeleteSession={() => {}}
            />
          </>
        )}
      </div>
    </>
  );
}
```

## src/pages/reports.tsx
```typescript
import Head from 'next/head';
import { useState, useEffect } from 'react';
import { Session, SessionService } from '@/lib/idb';
import { TrendingUp, Calendar, Download } from 'lucide-react';
import { formatDuration } from '@/lib/timeUtils';

export default function ReportsPage() {
  const [sessions, setSessions] = useState<Session[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadAllSessions();
  }, []);

  const loadAllSessions = async () => {
    setLoading(true);
    // For now, get last 30 days of data
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    const allSessions = await SessionService.getByDateRange(
      thirtyDaysAgo.toISOString(),
      new Date().toISOString()
    );
    setSessions(allSessions);
    setLoading(false);
  };

  const exportData = () => {
    const dataStr = JSON.stringify(sessions, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    
    const exportFileDefaultName = `time-tracker-export-${new Date().toISOString().split('T')[0]}.json`;
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
  };

  const stats = {
    totalSessions: sessions.length,
    totalWork: sessions
      .filter(s => s.type === 'work' && s.duration_ms)
      .reduce((sum, s) => sum + (s.duration_ms || 0), 0),
    totalBreaks: sessions
      .filter(s => ['break', 'lunch', 'dinner'].includes(s.type) && s.duration_ms)
      .reduce((sum, s) => sum + (s.duration_ms || 0), 0),
    techIssues: sessions.filter(s => s.type === 'tech').length,
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500"></div>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Reports - Time Tracker</title>
      </Head>

      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h1 className="text-2xl font-bold text-gray-900">Reports</h1>
          <button
            onClick={exportData}
            className="flex items-center gap-2 px-4 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors"
          >
            <Download size={16} />
            Export Data
          </button>
        </div>

        {/* Overview Stats */}
        <div className="grid grid-cols-2 gap-4">
          <div className="bg-white rounded-lg shadow-sm p-4">
            <div className="flex items-center gap-2 mb-2">
              <TrendingUp size={20} className="text-green-600" />
              <span className="text-sm text-gray-600">Total Work</span>
            </div>
            <div className="text-2xl font-bold text-green-600">
              {formatDuration(stats.totalWork)}
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm p-4">
            <div className="flex items-center gap-2 mb-2">
              <Calendar size={20} className="text-blue-600" />
              <span className="text-sm text-gray-600">Sessions</span>
            </div>
            <div className="text-2xl font-bold text-blue-600">
              {stats.totalSessions}
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm p-4">
            <div className="flex items-center gap-2 mb-2">
              <span className="text-yellow-600">‚òï</span>
              <span className="text-sm text-gray-600">Break Time</span>
            </div>
            <div className="text-2xl font-bold text-yellow-600">
              {formatDuration(stats.totalBreaks)}
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm p-4">
            <div className="flex items-center gap-2 mb-2">
              <span className="text-red-600">üîß</span>
              <span className="text-sm text-gray-600">Tech Issues</span>
            </div>
            <div className="text-2xl font-bold text-red-600">
              {stats.techIssues}
            </div>
          </div>
        </div>

        {/* Placeholder for charts */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <h3 className="text-lg font-semibold mb-4">Weekly Trends</h3>
          <div className="h-40 bg-gray-100 rounded-lg flex items-center justify-center">
            <span className="text-gray-500">Charts coming soon...</span>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm p-6">
          <h3 className="text-lg font-semibold mb-4">Productivity Insights</h3>
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <span className="text-gray-600">Average work session</span>
              <span className="font-medium">
                {stats.totalSessions > 0 
                  ? formatDuration(stats.totalWork / sessions.filter(s => s.type === 'work').length)
                  : '0m'
                }
              </span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-600">Work to break ratio</span>
              <span className="font-medium">
                {stats.totalBreaks > 0 
                  ? `${Math.round(stats.totalWork / stats.totalBreaks * 100) / 100}:1`
                  : 'N/A'
                }
              </span>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
```

## src/pages/settings.tsx
```typescript
import Head from 'next/head';
import { useState, useEffect } from 'react';
import { Download, Upload, Trash2, Shield } from 'lucide-react';
import { getDB } from '@/lib/idb';
import toast from 'react-hot-toast';

export default function SettingsPage() {
  const [settings, setSettings] = useState({
    timeFormat: 'AMPM',
    locale: 'en-IN',
    encryptBackup: false,
    autoBackupDays: 7
  });

  useEffect(() => {
    loadSettings();
  }, []);

  const loadSettings = async () => {
    try {
      const db = await getDB();
      const savedSettings = await db.get('settings', 'main');
      if (savedSettings) {
        setSettings(savedSettings);
      }
    } catch (error) {
      console.error('Failed to load settings:', error);
    }
  };

  const saveSettings = async (newSettings: typeof settings) => {
    try {
      const db = await getDB();
      await db.put('settings', newSettings, 'main');
      setSettings(newSettings);
      toast.success('Settings saved!');
    } catch (error) {
      toast.error('Failed to save settings');
    }
  };

  const exportAllData = async () => {
    try {
      const db = await getDB();
      const sessions = await db.getAll('sessions');
      const projects = await db.getAll('projects');
      
      const exportData = {
        version: '1.0',
        exportDate: new Date().toISOString(),
        sessions,
        projects,
        settings
      };

      const dataStr = JSON.stringify(exportData, null, 2);
      const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
      
      const exportFileDefaultName = `time-tracker-backup-${new Date().toISOString().split('T')[0]}.json`;
      
      const linkElement = document.createElement('a');
      linkElement.setAttribute('href', dataUri);
      linkElement.setAttribute('download', exportFileDefaultName);
      linkElement.click();
      
      toast.success('Data exported successfully!');
    } catch (error) {
      toast.error('Failed to export data');
    }
  };

  const handleFileImport = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = async (e) => {
      try {
        const importData = JSON.parse(e.target?.result as string);
        
        // Basic validation
        if (!importData.sessions || !Array.isArray(importData.sessions)) {
          throw new Error('Invalid file format');
        }

        const db = await getDB();
        const tx = db.transaction(['sessions', 'projects', 'settings'], 'readwrite');
        
        // Import sessions
        for (const session of importData.sessions) {
          await tx.objectStore('sessions').put(session);
        }
        
        // Import projects if present
        if (importData.projects) {
          for (const project of importData.projects) {
            await tx.objectStore('projects').put(project);
          }
        }
        
        await tx.done;
        toast.success(`Imported ${importData.sessions.length} sessions!`);
        
      } catch (error) {
        toast.error('Failed to import data. Please check file format.');
      }
    };
    
    reader.readAsText(file);
    event.target.value = ''; // Reset input
  };

  const clearAllData = async () => {
    if (!confirm('‚ö†Ô∏è This will delete ALL your time tracking data. This cannot be undone.\n\nAre you absolutely sure?')) {
      return;
    }

    if (!confirm('Last chance! This will permanently delete everything. Continue?')) {
      return;
    }

    try {
      const db = await getDB();
      const tx = db.transaction(['sessions', 'projects', 'audit_log'], 'readwrite');
      
      await tx.objectStore('sessions').clear();
      await tx.objectStore('projects').clear();
      await tx.objectStore('audit_log').clear();
      
      await tx.done;
      toast.success('All data cleared');
    } catch (error) {
      toast.error('Failed to clear data');
    }
  };

  return (
    <>
      <Head>
        <title>Settings - Time Tracker</title>
      </Head>

      <div className="space-y-6">
        <h1 className="text-2xl font-bold text-gray-900">Settings</h1>

        {/* Data Management */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
            <Shield size={20} />
            Data Management
          </h3>
          
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium">Export Data</div>
                <div className="text-sm text-gray-600">Download all your data as JSON</div>
              </div>
              <button
                onClick={exportAllData}
                className="flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
              >
                <Download size={16} />
                Export
              </button>
            </div>

            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium">Import Data</div>
                <div className="text-sm text-gray-600">Upload JSON backup file</div>
              </div>
              <label className="flex items-center gap-2 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors cursor-pointer">
                <Upload size={16} />
                Import
                <input
                  type="file"
                  accept=".json"
                  onChange={handleFileImport}
                  className="hidden"
                />
              </label>
            </div>

            <hr className="my-4" />

            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium text-red-600">Clear All Data</div>
                <div className="text-sm text-gray-600">Permanently delete everything</div>
              </div>
              <button
                onClick={clearAllData}
                className="flex items-center gap-2 px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
              >
                <Trash2 size={16} />
                Clear All
              </button>
            </div>
          </div>
        </div>

        {/* Preferences */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <h3 className="text-lg font-semibold mb-4">Preferences</h3>
          
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium">Time Format</div>
                <div className="text-sm text-gray-600">How times are displayed</div>
              </div>
              <select
                value={settings.timeFormat}
                onChange={(e) => saveSettings({ ...settings, timeFormat: e.target.value as 'AMPM' })}
                className="border border-gray-300 rounded-lg px-3 py-2"
              >
                <option value="AMPM">12-hour (AM/PM)</option>
              </select>
            </div>

            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium">Locale</div>
                <div className="text-sm text-gray-600">Language and region</div>
              </div>
              <select
                value={settings.locale}
                onChange={(e) => saveSettings({ ...settings, locale: e.target.value })}
                className="border border-gray-300 rounded-lg px-3 py-2"
              >
                <option value="en-IN">English (India)</option>
                <option value="en-US">English (US)</option>
                <option value="hi-IN">Hindi (India)</option>
              </select>
            </div>
          </div>
        </div>

        {/* App Info */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <h3 className="text-lg font-semibold mb-4">About</h3>
          <div className="space-y-2 text-sm text-gray-600">
            <div>Version: 1.0.0</div>
            <div>Storage: IndexedDB (Local)</div>
            <div>Privacy: All data stays on your device</div>
          </div>
        </div>
      </div>
    </>
  );
}
```

## public/favicon.ico
```
For favicon.ico, either:
1. Create a simple 32x32 pixel icon and save as favicon.ico
2. Or download a free timer icon from https://favicon.io/emoji-favicons/timer-clock/
3. Or use this data URL in your browser to generate one:
   data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><text y=".9em" font-size="90">‚è±Ô∏è</text></svg>
```

## PWA Icons (public/icon-192x192.png and public/icon-512x512.png)
```
Create simple square icons with timer/clock symbols:
- 192x192 pixels for icon-192x192.png  
- 512x512 pixels for icon-512x512.png

You can:
1. Use Canva or similar to create simple clock icons
2. Use emoji ‚è±Ô∏è on colored background
3. Or use https://favicon.io/favicon-generator/ to create both
```
